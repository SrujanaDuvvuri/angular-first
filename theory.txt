e2e -- end to end testing
nodemodules-- packages of node
src--  code folder

commands
--------
install nodejs 
npm install -g @angular/cli
ng new my-dream-app
cd my-dream-app
ng serve

what is Angular?
----------------
Angular is a deveopment platform for building a single 
page applications for mobile and desktop
1. It uses typescript & HTML to build applications 
2. Angular is written using typescript
3. It comes with features like component, directives, forms,
pipes, services, Dependency Inject(DI)

Angular versions
------------------
Early version on angular was named as Angular2, later It
was renamed to Angular

Angular team releases new versions of the Angular regarly (approx for every 6 months)

latest stable version is 11.1.1

angular is developed and mainatined by google. IT has large community
using which we can find help over the internet easily/

features of angular
------------------
1. two-way binding -- Data binding is fast and automatic
                   -- changes made to the view is automatically updated 
                    in the component class and vice versa

2. powerful routing support -- 

3. Expressive HTML -- we can use programming constructs like, if conditions 
                    for loops etc.. to render and control HTML pages.

4. Modular by design -- Angular follows modular design. we can create
                    modules better organised and manage our codebase.

Angular cli
---------------
Angular CLI is a command line interface tool that was to initilaze, develop
scaffold and maintain Angular applications directly from a command shell.

1. install node.js 
2. npm install -g @angular-cli@latest (g -- global and latest can be replaced with version)
3. ng new angular-app (create a new folder)
4. cd angular-app
5. ng serve or npm start
bootstrap
===========
install npm bootstrap and import it globally via locating it.. 
@import "../node_modules/bootstrap/dist/css/bootstrap.min.css"

or add the below tags in index.html

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW" crossorigin="anonymous"></script>

bootstrap in app.module.ts is different.. 
  bootstrap: [AppComponent]

  
3 things in app.ts 
-------------------
1. imports for library
2. class 
3. decorator - components -- decorated with @


export keyword makes your class available outside the class
componet will have metadata

selector -- where to display the template(linked to html)
templateurl -- html related to It (index.html replaces with template url html)
styleurls -- it is for css , it can have array of class
{{}} -- double curly braces -- single databinding -- no changes can be made
interpolation 

databinding -- change data dynamically, as per user response
1. one way databinding
2. two way databinding

one way databinding -- data flow from one way either from component to html or viceversa
two way databinding -- data flow both sides

{{title}} -- title is called string literal
title is called template expression

[()] --ng model -- two way data binding

include bootstrap -- 

include it in html-- by adding css and js from bootstrap.com\\

or install bootstap and in cssfile


angular modules
--------------
app.module.ts -- every application should have one module
module loads first called root module
it has imports, export and decoratons

declarations -- list of components -- we create
imports -- meta data, list of other modules used by this app module
routing -- next page application
providers-- service
bootstrap - array, whatever components listed willhave bootstrap
fav icon -- browser icon at table levels
app routing -- define routes

main.ts -- bootstrap the apmodule 


assests -- to keep images

.gitkeep -- to put empty checkin of folder

polyfll.ts -- any browser compatability issues can be addressed

sstyles.css -- global sstyles

test.ts -- entry point for unit testing

component selector
--------------------
1. selector can be directly used by typing element name or
by attribute sleector or by class selector

selector : 'app-root' <app-root></app-root>

selector: '[app-root]'  <div app-root></div>

selector: '[app="app-root"]'   <div app="app-root"></div>

selector: '.app-root'      <div class="app-root"></div>


commands to create components , directives etc
--------------------------------------------------
create component - ng generate component <name> or ng g c <name>

create directive -- ng generate directive <name> or 
                  ng g d <name>
template url
-------------
helps to write html, defines view

template and templateURL
---------------------------
Template - internal HTML
templateURL - external HTML file
 template : `
    <div class="container">
    <h1>This is inline style</h1>
    <h1> {{fullName}} </h1>
    </div>
  `,
  // styleUrls: ['./app.component.css']
  styles :[`
      h1{
        color: red
      }

`]
style & styleurls
---------------------
styles -- internal class
style url :External css file

databinding
------------
Data binding keeps both component and view in sync with each other

One-way binding
-----------------

interpolation -- {{ }} -- double curly braces - create a property and pass property or pass it directly
                    content inside the double curly braces is called template expression"

writing static text inside double curly braces
{{'hello world'}} -- single quote
{{"hellow world"}} -- double quote

property binding -- 
 firstName = 'Suji';
  lastName = 'Duvvuri';
  fullName = 'tim cook'
    {{firstName}} {{lastName}}

       text = 'Welcome to Angular'
   isDisabled = false;
   url ="https://cli.angular.io/"

  <h1 [innerText]="text"></h1>
  <button [disabled]="isDisabled">I am disabled</button><br><br>
  <a [href]="url" [target]="target" >Angular CLI</a>


two way binding
----------------
we can edit and send back the value
 firstName = 'Suji'; 
     <input type="text" [(ngModel)]="fullName" class="form-control"><br>

event binding -- 
    <button (click) ="getName()" class='btn btn-primary'>Get full name</button>
getName(){
  console.log(this.fullName)
  this.fullName = 'Srujana'
  console.log(this.fullName)
}

Angular directives
-------------------

Angular directives helps us to manipulate the deveopment
we can change the appearance, behaviour or layout of a DOM element using directives
They help us to extend the HTML

structural Directives               Attribute Directives
---------------------               --------------------------------
*ngFor                                ngModel
*ngSwitch                             ngClass
*ngIF                                 ngStyle


*ngFor -- It iterates over a collection of data to fetch the data
  Angular ngFor directive iterates over a collection of data. 
  like an array, list etc., and create HTML element for each of the items
  from a HTML template
  
additional properties of NG: 
  let id=index;
let first=first; let last=last; let even=even; let odd=odd; let count=count"

  It helps us to build lists of tables to display tabular data in nice way

  the syntax states with *ngFor, the * represents Angular template syntax

  even 
  odd
  first
  last
  index
  count
  
*ngSwitch
==========

It is an angular structural directive which allows us to add or remove DOM elements\

it works in conjunction with ngSwitchCase & ngSwitchDefault

<container-element [ngSwitch]="switch_expression">
<inner_element *ngSwitchCase="expression"></inner_element>
<inner_element *ngSwitchCase="expression"></inner_element>
<inner_element *ngSwitchCase="expression"></inner_element>
<inner_element *ngSwitchCaseDefault"></inner_element>
</container-element>

[ngSwitch]
----------
It is bound to container element like div
We assign switch expression via property binding

ngSwitchCase
--------------
This is bound to inner element whichever must place inside container element
we use *(asterik), becuase it is structural directives


ngSwitchDefault
---------------
It is bound to inner element , which we must place inside the container


*ngIF
--------
Allows us to add or remove DOM element based on some conditions
we can add this to any element like div, p, h1 etc.,\\
It must be prefixed with *

ngIf vs hidden
=============
ngIf removes element from dom , hidden just hides from dom


ngClass
--------
Adds or removes CSS classes on an HTML elements

ngClass with a string
---------------------
we can use the string as expression and bind it directly to ngClass attribute
we can add multiple classes with space between each class

ngClass with an Array
----------------------
we can achieve the same result by using an array instead of string

ngClass with an Object
----------------------
we can achieve the same result by using an object instead of array

ngStyle
----------
allows us to set the inline style of a HTMLelement using expressoon

custom Directives
-------
element ref: is a service that grants direct access
to the DOM element through its native element property

Angular pipes

-----------------

The angular pipes are used to transform the data

We can pass arguments to pipe and chain pipes
These rguments can be added to the pipe using a colon(:) and followed by value of argument
the angular allows us to create custom pipes 

Angular pipes takes data as input and formats or transform the data to display in the template

Inbuilt pipes : currency pipe, date pipe, number pipe, percent pipe, decimal pipe, slice pipe et.,

date pipes:
https://angular.io/api/common/DatePipe

Child to parent
------------------
There are three ways in which parent can interact with child component.

1. Parent listeners to child event
2. Parent uses local variables to access the child
3. Parent uses @ViewChild to get reference to the child componenet


Parent listeners to child event
------------------------------------

1. The child component exposes an eventEmitter property 
2. This property is decorated with @Output decorator
3. when the child component needs to communicate with parent it raises the event
4. The parent component listens to the event and reacts to it 

eventEmitter
-----------
1. to raise an event the component must declare an eventEmitter property
2. The event can be emitted by calling emit() method

output decorator
------------------
To make the event accessible from parent components we must decoraate
the property with @Output decorator


Parent uses local variable to access the child
-------------------------------------------------



Angular lifecycle hooks
---------------------------
The lifecycle hooks are the methods that angular invokes on the diretives and
components as it creates, changes and destroys them.





